lib = library(identifier: "jenkins@20211118", retriever: legacySCM(scm))

pipeline {
    agent none
    environment {
        AWS_ROLE_ARN = "arn:aws:iam::${AWS_ACCOUNT_PUBLIC}:role/opensearch-test"
        AWS_ROLE_SESSION_NAME = "jenkins-test-session"
    }
    tools {
        jdk "JDK14"
        maven "maven-3.8.2"
    }
    parameters {
        string(
            defaultValue: '',
            name: 'TEST_MANIFEST',
            description: 'Test manifest under the manifests folder, e.g. manifests/2.0.0/opensearch-2.0.0-test.yml.',
            trim: true
        )
        string(
            defaultValue: '',
            name: 'BUILD_MANIFEST_URL',
            description: 'The build manifest URL, e.g. https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.2.2/98/linux/x64/dist/opensearch/manifest.yml.',
            trim: true
        )
    }
    stages {
        stage('Extract build information from build manifest') {
            steps {
                node('Jenkins-Agent-al2-x64-m5xlarge') {
                    script {
                        getBuildManifestInfo()
                    }
                }
            }
        }
        stage('Choose Agent Node') {
            steps {
                script {
                    if ("${env.ARCHITECTURE}" == 'x64') {
                        agentLabel = "Jenkins-Agent-al2-x64-m5xlarge"
                    } else if ("${env.ARCHITECTURE}" == 'arm64') {
                        agentLabel = "Jenkins-Agent-al2-arm64-m6gxlarge"
                    } else {
                        error("Unknown CPU architecture is provided")
                    }
                }
            }
        }
        stage('integ-test') {
            agent {
                node {
                    label "${agentLabel}"
                }
            }
            steps {
                script {
                    runIntegTestScript(
                        buildManifest: "${BUILD_MANIFEST}",
                        testManifest: "${TEST_MANIFEST}"
                    )
                }
            }
            post {
                always {
                    script {
                        uploadTestResults(
                            buildManifestFileName: "${env.BUILD_MANIFEST}",
                            jobName: 'integ-test',
                            buildNumber: "${env.BUILD_ID}"
                        )
                    }
                    cleanWs disableDeferredWipeout: true, deleteDirs: true
                }
            }
        }
    }
    // post {
    //     success {
    //         node('Jenkins-Agent-al2-x64-m5xlarge') {
    //             script {
    //                 def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
    //                 publishNotification(
    //                     icon: ':white_check_mark:',
    //                     message: 'Integration Tests Successful',
    //                     extra: stashed,
    //                     credentialsId: 'INTEG_TEST_WEBHOOK',
    //                 )

    //                 cleanWs(
    //                     disableDeferredWipeout: true,
    //                     deleteDirs: true
    //                 )
    //             }
    //         }
    //     }
    //     failure {
    //         node('Jenkins-Agent-al2-x64-m5xlarge') {
    //             script  {
    //                 def stashed = lib.jenkins.Messages.new(this).get(['integ-test'])
    //                 publishNotification(
    //                     icon: ':warning:',
    //                     message: 'Failed Integration Tests',
    //                     extra: stashed,
    //                     credentialsId: 'INTEG_TEST_WEBHOOK',
    //                 )

    //                 cleanWs(
    //                     disableDeferredWipeout: true,
    //                     deleteDirs: true
    //                 )
    //             }
    //         }
    //     }
    // }
}
